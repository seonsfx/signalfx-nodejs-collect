(function() {
  var Checker, Collection, Counter, metrics, parse, pathMatch, sss, __,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  __ = require('something-something');

  parse = require('url').parse;

  pathMatch = require('path-match');

  Collection = require('./collection');

  Checker = require('./modules/checker');

  Counter = require('./modules/counter');

  metrics = require('./metrics');

  module.exports = sss = function() {
    var all, checkers, counters, get, match, middleware, modules, name, recordHit, route, routes;
    match = pathMatch({
      sensitive: false,
      strict: true,
      end: true
    });
    route = function(path, fn) {
      return {
        match: match(path),
        handle: fn
      };
    };
    middleware = function(req, res, next) {
      return middleware.get(parse(req.url).pathname, function(err, result) {
        if (err) {
          return res.send(err);
        }
        return res.send(result);
      });
    };
    checkers = new Collection(Checker);
    counters = new Collection(Counter);
    checkers.add('ping', function() {
      return true;
    });
    recordHit = counters.add('stats');
    middleware.check = checkers.add;
    middleware.count = counters.add;
    modules = {
      check: checkers,
      count: counters
    };
    all = {};
    for (name in modules) {
      all[name] = "/" + name;
    }
    for (name in metrics) {
      all[name] = "/" + name;
    }
    routes = [
      route('/', function(params, cb) {
        return __.map(all, get, cb);
      })
    ].concat(Object.keys(modules).map(function(type) {
      var collection;
      collection = modules[type];
      return route("/" + type, function(params, cb) {
        var resolve;
        resolve = function(fn, done) {
          return fn(function(val) {
            return done(null, val);
          });
        };
        return __.map(collection.getAll(), resolve, cb);
      });
    })).concat(Object.keys(modules).map(function(type) {
      var collection;
      collection = modules[type];
      return route("/" + type + "/:name", function(params, cb) {
        var handle, _ref;
        if (_ref = params.name, __indexOf.call(collection.getNames(), _ref) < 0) {
          if (cb) {
            cb(404);
          }
          return;
        }
        handle = collection.get(params.name);
        return handle(function(value) {
          return cb(null, value);
        });
      });
    })).concat(Object.keys(metrics).map(function(type) {
      var metric;
      metric = metrics[type];
      return route("/" + type, function(params, cb) {
        var resolve;
        resolve = function(fn, done) {
          return fn(done);
        };
        return __.map(metric, resolve, cb);
      });
    })).concat(Object.keys(metrics).map(function(type) {
      var metric;
      metric = metrics[type];
      return route("/" + type + "/:name", function(params, cb) {
        if (!(params.name in metric)) {
          if (cb) {
            cb(404);
          }
          return;
        }
        return metric[params.name](cb);
      });
    }));
    middleware.get = function(path, cb) {
      recordHit();
      return get(path, cb);
    };
    get = function(path, cb) {
      var params, _i, _len;
      for (_i = 0, _len = routes.length; _i < _len; _i++) {
        route = routes[_i];
        params = route.match(path);
        if (params) {
          return route.handle(params, cb);
        }
      }
      if (cb) {
        return cb(404);
      }
    };
    middleware.end = function() {
      return metrics.cpu.cancel();
    };
    metrics.cpu.collect();
    return middleware;
  };

}).call(this);
